type UpdateUsername = record {username: text;};
type UpdateTournamentStage = record {};
type UpdateProfilePicture = record {profilePicture: opt blob;};
type UpdateGolfer = 
 record {
   firstName: text;
   lastName: text;
 };
type UpdateGolfCourse = record {};
type TournamentId = nat16;
type SwapGolfer = 
 record {
   newGolferHole: nat8;
   newGolferId: GolferId;
   removedGolferHole: nat8;
   removedGolferId: GolferId;
   tournamentId: TournamentId;
 };
type SubmitPrediction = 
 record {
   hole10GolferId: GolferId;
   hole11GolferId: GolferId;
   hole12GolferId: GolferId;
   hole13GolferId: GolferId;
   hole14GolferId: GolferId;
   hole15GolferId: GolferId;
   hole16GolferId: GolferId;
   hole17GolferId: GolferId;
   hole18GolferId: GolferId;
   hole1GolferId: GolferId;
   hole2GolferId: GolferId;
   hole3GolferId: GolferId;
   hole4GolferId: GolferId;
   hole5GolferId: GolferId;
   hole6GolferId: GolferId;
   hole7GolferId: GolferId;
   hole8GolferId: GolferId;
   hole9GolferId: GolferId;
   tournamentId: TournamentId;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: GolfCourse;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: Golfer;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: Prediction;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Leaderboard;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   joinedOn: int;
   principalId: PrincipalId;
   username: text;
 };
type PrincipalId = text;
type Prediction = record {};
type Leaderboard = record {};
type GolferId = nat16;
type Golfer = 
 record {
   firstName: text;
   id: GolferId;
   lastName: text;
 };
type GolfHole = 
 record {
   holeNumber: nat8;
   strokeIndex: nat8;
   yardage: nat16;
 };
type GolfCourseId = nat16;
type GolfCourse = 
 record {
   countryId: CountryId;
   founded: int;
   id: GolfCourseId;
   mainImage: opt blob;
   mainImageExtension: text;
   manager: text;
   name: text;
   totalHoles: nat8;
 };
type GetScorecard = record {principalId: PrincipalId;};
type GetProfile = record {};
type GetPrediction = record {};
type GetLeaderboard = record {};
type GetGolfer = record {golferId: GolferId;};
type GetGolfCourse = record {id: GolfCourseId;};
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type CreateProfile = 
 record {
   profilePicture: opt blob;
   username: text;
 };
type CreateGolfer = 
 record {
   lastName: text;
   username: text;
 };
type CreateGolfCourse = record {holes: vec GolfHole;};
type CountryId = nat16;
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
service : {
  createGolfCourse: (CreateGolfCourse) -> (Result);
  createGolfer: (CreateGolfer) -> (Result);
  createProfile: (CreateProfile) -> (Result);
  getAppStatus: () -> (Result_6) query;
  getGolfCourse: (GetGolfCourse) -> (Result_5) query;
  getGolfer: (GetGolfer) -> (Result_4) query;
  getLeaderboard: (GetLeaderboard) -> (Result_1) query;
  getPrediction: (GetPrediction) -> (Result_3) query;
  getProfile: (GetProfile) -> (Result_2) query;
  getScorecard: (GetScorecard) -> (Result_1) query;
  submitPrediction: (SubmitPrediction) -> (Result);
  swapGolfer: (SwapGolfer) -> (Result);
  updateGolfCourse: (UpdateGolfCourse) -> (Result);
  updateGolfer: (UpdateGolfer) -> (Result);
  updateProfilePicture: (UpdateProfilePicture) -> (Result);
  updateTournamentStage: (UpdateTournamentStage) -> (Result);
  updateUsername: (UpdateUsername) -> (Result);
}
