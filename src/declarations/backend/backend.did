type UsernameAvailable = bool;
type UpdateUsername = 
 record {
   principalId: GolferId;
   username: text;
 };
type UpdateProfilePicture = 
 record {
   principalId: GolferId;
   profilePicture: opt blob;
   profilePictureExtension: text;
 };
type UpdateLastName = 
 record {
   lastName: text;
   principalId: GolferId;
 };
type UpdateHomeCourse = 
 record {
   homeCourseId: opt GolfCourseId;
   principalId: GolferId;
 };
type UpdateHandicap = 
 record {
   handicap: opt Handicap;
   principalId: GolferId;
 };
type UpdateGolfCourse = 
 record {
   courseId: GolfCourseId;
   name: text;
   updatedTeeGroup: opt TeeGroup;
 };
type UpdateFirstName = 
 record {
   firstName: text;
   principalId: GolferId;
 };
type TeeInfo = 
 record {
   colour: text;
   name: text;
   par: nat8;
   strokeIndex: nat8;
   yardage: nat;
 };
type TeeGroup = 
 record {
   added: int;
   colour: text;
   holes: vec Hole;
   name: text;
   strokeIndex: nat8;
 };
type SendFriendRequest = 
 record {
   principalId: GolferId;
   requestedFriend: GolferId;
 };
type RustResult = 
 variant {
   Err: text;
   Ok: text;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: AppStatusDTO;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: GolfCourse;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: GolfCourses;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: UsernameAvailable;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: FriendRequests;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Friends;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Golfers;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RejectFriendRequest = 
 record {
   principalId: GolferId;
   requestedBy: GolferId;
 };
type Profile = 
 record {
   golferPicture: opt blob;
   golferPictureExtension: text;
   handicap: opt Handicap;
   principalId: GolferId;
   username: text;
 };
type ListGolfers = 
 record {
   limit: nat;
   offset: nat;
   searchTerm: text;
   totalEntries: nat;
 };
type ListFriends = 
 record {
   limit: nat;
   offset: nat;
   principalId: GolferId;
   totalEntries: nat;
 };
type ListFriendRequests = 
 record {
   limit: nat;
   offset: nat;
   principalId: GolferId;
   totalEntries: nat;
 };
type IsUsernameAvailable = 
 record {
   principalId: GolferId;
   username: text;
 };
type ImageId = nat;
type Hole = 
 record {
   images: vec record {
                 CanisterId;
                 ImageId;
               };
   name: text;
   number: nat8;
   tees: vec TeeInfo;
 };
type Handicap = int16;
type Golfers = record {golfers: vec GolferSummary;};
type GolferSummary = 
 record {
   golferName: text;
   golferPicture: opt blob;
   golferPictureExtension: text;
   golferPrincipalId: GolferId;
   handicap: opt Handicap;
 };
type GolferId = text;
type GolfCourses = record {entries: vec GolfCourse;};
type GolfCourseVersion = nat8;
type GolfCourseId = nat;
type GolfCourse = 
 record {
   activeVersion: GolfCourseVersion;
   courseId: GolfCourseId;
   name: text;
   tees: vec TeeGroup;
 };
type GetProfile = record {principalId: GolferId;};
type GetGolfCourses = 
 record {
   limit: nat;
   offset: nat;
   searchTerm: text;
 };
type GetGolfCourse = record {golfCourseId: GolfCourseId;};
type Friends = record {friendRequests: vec Friend;};
type FriendRequests = record {friendRequests: vec FriendRequest;};
type FriendRequest = 
 record {
   principalId: GolferId;
   requestTime: int;
 };
type Friend = record {principalId: GolferId;};
type Error = 
 variant {
   AlreadyExists;
   CanisterFull;
   CreateGameError;
   DecodeError;
   InvalidProfilePicture;
   NotAllowed;
   NotAuthorized;
   NotEnoughFunds;
   NotFound;
   OutOfRange;
   PaymentError;
   TooLong;
   TooShort;
 };
type CreateUser = 
 record {
   handicap: opt Handicap;
   profilePicture: opt blob;
   profilePictureExtension: opt text;
   username: text;
 };
type CreateGolfCourse = 
 record {
   holes: vec Hole;
   initialTeeGroup: TeeGroup;
   name: text;
 };
type CanisterId = text;
type AppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
type AcceptFriendRequest = 
 record {
   principalId: GolferId;
   requestedBy: GolferId;
 };
service : {
  acceptFriendRequest: (AcceptFriendRequest) -> (Result);
  createUser: (CreateUser) -> (Result);
  executeAddGolfCourse: (CreateGolfCourse) -> ();
  executeUpdateGolfCourse: (UpdateGolfCourse) -> ();
  getAppStatus: () -> (Result_8) query;
  getGolfCourse: (GetGolfCourse) -> (Result_7);
  getGolfCourses: (GetGolfCourses) -> (Result_6);
  getProfile: (GetProfile) -> (Result_5);
  isUsernameAvailable: (IsUsernameAvailable) -> (Result_4) query;
  listFriendRequests: (ListFriendRequests) -> (Result_3);
  listFriends: (ListFriends) -> (Result_2);
  listGolfers: (ListGolfers) -> (Result_1);
  rejectFriendRequest: (RejectFriendRequest) -> (Result);
  sendFriendRequest: (SendFriendRequest) -> (Result);
  updateFirstName: (UpdateFirstName) -> (Result);
  updateHandicap: (UpdateHandicap) -> (Result);
  updateHomeCourse: (UpdateHomeCourse) -> (Result);
  updateLastName: (UpdateLastName) -> (Result);
  updateProfilePicture: (UpdateProfilePicture) -> (Result);
  updateUsername: (UpdateUsername) -> (Result);
  validateAddGolfCourse: (CreateGolfCourse) -> (RustResult) query;
  validateUpdateGolfCourse: (UpdateGolfCourse) -> (RustResult) query;
}
