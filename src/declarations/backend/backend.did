type UpdateUsername = 
 record {
   principalId: GolferId;
   username: text;
 };
type UpdateProfilePicture = 
 record {
   principalId: GolferId;
   profilePicture: opt blob;
   profilePictureExtension: text;
 };
type UpdateHomeCourse = 
 record {
   homeCourseId: opt GolfCourseId;
   principalId: GolferId;
 };
type UpdateHandicap = 
 record {
   handicap: opt Handicap;
   principalId: GolferId;
 };
type UpdateGolfCourse = 
 record {
   courseId: GolfCourseId;
   name: text;
   updatedTeeGroup: opt TeeGroup;
 };
type TeeInfo = 
 record {
   colour: text;
   name: text;
   par: nat8;
   strokeIndex: nat8;
   yardage: nat;
 };
type TeeGroup = 
 record {
   added: int;
   colour: text;
   holes: vec Hole;
   name: text;
   strokeIndex: nat8;
 };
type SendFriendRequest = 
 record {
   principalId: GolferId;
   requestedFriend: GolferId;
 };
type RustResult = 
 variant {
   Err: text;
   Ok: text;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: AppStatusDTO;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: GolfCourses;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: FriendRequestsDTO;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RejectFriendRequest = 
 record {
   principalId: GolferId;
   requestedBy: GolferId;
 };
type ListFriendRequests = 
 record {
   limit: nat;
   offset: nat;
   principalId: GolferId;
   totalEntries: nat;
 };
type ImageId = nat;
type Hole = 
 record {
   images: vec record {
                 CanisterId;
                 ImageId;
               };
   name: text;
   number: nat8;
   tees: vec TeeInfo;
 };
type Handicap = int16;
type GolferId = text;
type GolfCourses = record {};
type GolfCourseId = nat;
type GetGolfCourses = 
 record {
   limit: nat;
   offset: nat;
   searchTerm: text;
 };
type FriendRequestsDTO = record {friendRequests: vec FriendRequestDTO;};
type FriendRequestDTO = 
 record {
   principalId: GolferId;
   requestTime: int;
 };
type Error = 
 variant {
   AlreadyExists;
   CanisterFull;
   CreateGameError;
   DecodeError;
   InvalidProfilePicture;
   NotAllowed;
   NotAuthorized;
   NotEnoughFunds;
   NotFound;
   OutOfRange;
   PaymentError;
   TooLong;
   TooShort;
 };
type CreateGolfer = 
 record {
   handicap: opt Handicap;
   principalId: GolferId;
   profilePicture: opt blob;
   profilePictureExtension: opt text;
   username: text;
 };
type CreateGolfCourse = 
 record {
   holes: vec Hole;
   initialTeeGroup: TeeGroup;
   name: text;
 };
type CanisterId = text;
type AppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
type AcceptFriendRequest = 
 record {
   principalId: GolferId;
   requestedBy: GolferId;
 };
service : {
  acceptFriendRequest: (AcceptFriendRequest) -> (Result);
  createGolfer: (CreateGolfer) -> (Result);
  executeAddGolfCourse: (CreateGolfCourse) -> ();
  executeUpdateGolfCourse: (UpdateGolfCourse) -> ();
  getAppStatus: () -> (Result_3) query;
  getGolfCourses: (GetGolfCourses) -> (Result_2);
  listFriendRequests: (ListFriendRequests) -> (Result_1);
  rejectFriendRequest: (RejectFriendRequest) -> (Result);
  sendFriendRequest: (SendFriendRequest) -> (Result);
  updateHandicap: (UpdateHandicap) -> (Result);
  updateHomeCourse: (UpdateHomeCourse) -> (Result);
  updateProfilePicture: (UpdateProfilePicture) -> (Result);
  updateUsername: (UpdateUsername) -> (Result);
  validateAddGolfCourse: (CreateGolfCourse) -> (RustResult) query;
  validateUpdateGolfCourse: (UpdateGolfCourse) -> (RustResult) query;
}
