type UpdateUsername = record {username: text;};
type UpdateTournamentStage = 
 record {
   stage: TournamentStage;
   tournamentId: TournamentId;
   year: nat16;
 };
type UpdateProfilePicture = record {profilePicture: opt blob;};
type UpdateGolfer = 
 record {
   firstName: text;
   id: GolferId;
   lastName: text;
   nationality: CountryId;
   worldRanking: nat16;
 };
type UpdateGolfCourse = 
 record {
   coursePar: nat8;
   holes: vec GolfHole;
   id: GolfCourseId;
   name: text;
   yardage: nat16;
 };
type UpdateAppStatus = 
 record {
   onHold: bool;
   version: text;
 };
type Tournaments = 
 record {
   entries: vec TournamentSummary;
   page: nat;
   totalEntries: nat;
 };
type TournamentSummary = 
 record {
   name: text;
   tournamentId: TournamentId;
 };
type TournamentStage = 
 variant {
   Completed;
   NotStarted;
   Round1Active;
   Round1Complete;
   Round2Active;
   Round2Complete;
   Round3Active;
   Round3Complete;
   Round4Active;
 };
type TournamentId = nat16;
type Tournament = record {tournamentId: TournamentId;};
type SwapGolfer = 
 record {
   newGolferHole: nat8;
   newGolferId: GolferId;
   removedGolferHole: nat8;
   removedGolferId: GolferId;
   tournamentId: TournamentId;
 };
type SubmitPrediction = 
 record {
   hole10GolferId: GolferId;
   hole11GolferId: GolferId;
   hole12GolferId: GolferId;
   hole13GolferId: GolferId;
   hole14GolferId: GolferId;
   hole15GolferId: GolferId;
   hole16GolferId: GolferId;
   hole17GolferId: GolferId;
   hole18GolferId: GolferId;
   hole1GolferId: GolferId;
   hole2GolferId: GolferId;
   hole3GolferId: GolferId;
   hole4GolferId: GolferId;
   hole5GolferId: GolferId;
   hole6GolferId: GolferId;
   hole7GolferId: GolferId;
   hole8GolferId: GolferId;
   hole9GolferId: GolferId;
   tournamentId: TournamentId;
 };
type Scorecard = record {};
type Result_9 = 
 variant {
   err: Error;
   ok: FantasyLeaderboard;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: Prediction;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: Scorecard;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: Tournament;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: GolfCourses;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: Golfers;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Predictions;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: GolfCourse;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: Golfer;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Tournaments;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   joinedOn: int;
   principalId: PrincipalId;
   username: text;
 };
type PrincipalId = text;
type Predictions = 
 record {
   entries: vec PredictionSummary;
   page: nat;
   totalEntries: nat;
 };
type PredictionSummary = record {};
type Prediction = record {};
type ListTournaments = record {page: nat;};
type ListPredictions = record {page: nat;};
type ListGolfers = record {page: nat;};
type ListGolfCourses = record {page: nat;};
type Golfers = 
 record {
   entries: vec GolferSummary;
   page: nat;
   totalEntries: nat;
 };
type GolferSummary = record {};
type GolferId = nat16;
type Golfer = 
 record {
   firstName: text;
   id: GolferId;
   lastName: text;
   nationality: CountryId;
   worldRanking: nat16;
 };
type GolfHole__1 = 
 record {
   holeNumber: nat8;
   par: nat8;
   strokeIndex: nat8;
   yardage: nat16;
 };
type GolfHole = 
 record {
   holeNumber: nat8;
   par: nat8;
   strokeIndex: nat8;
   yardage: nat16;
 };
type GolfCourses = 
 record {
   entries: vec GolfCourseSummary;
   page: nat;
   totalEntries: nat;
 };
type GolfCourseSummary = record {};
type GolfCourseId = nat16;
type GolfCourse = 
 record {
   countryId: CountryId;
   founded: int;
   holes: vec GolfHole__1;
   id: GolfCourseId;
   mainImage: opt blob;
   mainImageExtension: text;
   manager: text;
   name: text;
   totalHoles: nat8;
 };
type GetTournament = record {tournamentId: TournamentId;};
type GetScorecard = record {principalId: PrincipalId;};
type GetProfile = record {};
type GetPrediction = record {};
type GetGolfer = record {golferId: GolferId;};
type GetGolfCourse = record {id: GolfCourseId;};
type GetFantasyLeaderboard = 
 record {
   page: nat;
   tournamentId: TournamentId;
 };
type FantasyPredictionHole = 
 record {
   golferId: GolferId;
   par: nat8;
   score: int8;
   shotCount: nat8;
 };
type FantasyLeaderboardEntry = 
 record {
   holes: vec FantasyPredictionHole;
   principalId: PrincipalId;
   score: int8;
   shots: nat8;
   username: text;
 };
type FantasyLeaderboard = 
 record {
   entries: vec FantasyLeaderboardEntry;
   page: nat;
   totalEntries: nat;
   tournamentId: TournamentId;
 };
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type CreateTournament = record {name: text;};
type CreateProfile = 
 record {
   profilePicture: opt blob;
   username: text;
 };
type CreateGolfer = 
 record {
   firstName: text;
   lastName: text;
   nationality: CountryId;
   worldRanking: nat16;
 };
type CreateGolfCourse = 
 record {
   coursePar: nat8;
   holes: vec GolfHole;
   name: text;
   yardage: nat16;
 };
type CountryId = nat16;
type CalculateLeaderboard = 
 record {
   tournamentId: TournamentId;
   year: nat16;
 };
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
service : {
  calculateLeaderboard: (CalculateLeaderboard) -> (Result);
  createGolfCourse: (CreateGolfCourse) -> (Result);
  createGolfer: (CreateGolfer) -> (Result);
  createProfile: (CreateProfile) -> (Result);
  createTournament: (CreateTournament) -> (Result);
  getAppStatus: () -> (Result_12) query;
  getGolfCourse: (GetGolfCourse) -> (Result_11) query;
  getGolfer: (GetGolfer) -> (Result_10) query;
  getLeaderboard: (GetFantasyLeaderboard) -> (Result_9) query;
  getPrediction: (GetPrediction) -> (Result_8) query;
  getProfile: (GetProfile) -> (Result_7) query;
  getScorecard: (GetScorecard) -> (Result_6) query;
  getTournament: (GetTournament) -> (Result_5) query;
  listGolfCourses: (ListGolfCourses) -> (Result_4) query;
  listGolfers: (ListGolfers) -> (Result_3) query;
  listPredictions: (ListPredictions) -> (Result_2) query;
  listTournaments: (ListTournaments) -> (Result_1) query;
  submitPrediction: (SubmitPrediction) -> (Result);
  swapGolfer: (SwapGolfer) -> (Result);
  updateAppStatus: (UpdateAppStatus) -> (Result);
  updateGolfCourse: (UpdateGolfCourse) -> (Result);
  updateGolfer: (UpdateGolfer) -> (Result);
  updateProfilePicture: (UpdateProfilePicture) -> (Result);
  updateTournamentStage: (UpdateTournamentStage) -> (Result);
  updateUsername: (UpdateUsername) -> (Result);
}
